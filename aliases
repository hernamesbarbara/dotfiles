#!/usr/bin/env bash

# run a simple HTTP server w/ single command
server () {
    if [ "$1" != "" ]
        then
            server_port=$1
        else
            server_port=5000
    fi
    open http://localhost:$server_port && python -m SimpleHTTPServer $server_port
}

random_words () {
    if [ "$1" != "" ]
    then
        local n_words=$1
    else
        local n_words=4
    fi
    if [ "$2" != "" ]
    then
        local sep="$2"
    else
        local sep="-"
    fi
    local words=$(echo $(egrep -v "é|'s$|[Åå]|[Øø]" /usr/share/dict/words | shuf --random-source=/dev/random -n"$n_words"))
    echo -e "$words" | sed "s/ /$sep/g"
}

# DATABASES
alias pgdown="pg_ctl -D /usr/local/var/postgres stop -s -m fast"
alias pgup="pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start"
alias pgstatus='pg_ctl status'

# IPYTHON
alias ipy='ipython --profile hernamesbarbara'
alias ipyq='ipython qtconsole'
alias ipynb='ipython notebook'

# SAFE CLEANUP - delete junk files safely + recursively
alias rmdss="find . -name '*.DS_Store' -type f -delete"
alias rmswo="find . -name '*.swo' -type f -delete"
alias rmswp="find . -name '*.swp' -type f -delete"
alias rmpyc="find . -name '*.pyc' -type f -delete"
alias rmjunk="rmdss && rmswo && rmswp && rmpyc && clear"

alias today="printf "$(date --iso-8601=date)" | pbcopy"    # copy today's date in ISO format to clipboard

# find file by name within current working directory
alias findh="find . -name "

find_and_rm () {
    find . -type f -name "$1" | xargs rm
}

function last_cmd_status () {
  if [ $? = 0 ]; then
    echo -e '\e[32m0\e[0m'
    return 0
  else
    echo -e '\e[31m$?\e[0m'
  return $?
fi
}

alias excel="open -a Microsoft\ Excel"
alias chrome="open -a Google\ Chrome"

# screen helpers
alias s='screen -ls'
alias sr='screen -rd'
function sn() { screen -S "$@"; }


# untar / archive data formats
alias untar='tar xvf'

# dircolors is only relevant if you are using
if is_valid_command dircolors; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Detect which `ls` flavor is in use
if is_valid_command ls -F --color --quote-name; then
    # GNU `ls`
    # -F            => append indicator (e.g. * for executables and / for directories)
    # --quote-name  => surround folder names in quotes
    # -N            => print raw entry names
    colorflag="-FN --color"
else
    # OS X `ls`
    # -G use colors
    # -p add trailing slash to directories
    # -F append * for executables
    colorflag="-GFp"
fi



# List all files colorized in long format, including dot files
alias la="ls -lha --block-size=MB"


function followers() {
    SCREEN_NAME=`t whoami | grep Name | cut -d',' -f1 | cut -d'e' -f2`
    SCREEN_NAME=`echo "$SCREEN_NAME" | xargs`
    N_FOLLOWERS=`t whoami | grep Followers | cut -d " " -f2-10`
    TEXT="$SCREEN_NAME has "$N_FOLLOWERS" followers"
    if [ "$SCREEN_NAME" = "Yhat" ]
        then
            SCREEN_NAME="why-hat"
    fi
    MSG="$SCREEN_NAME has "$N_FOLLOWERS" followers"
    echo $TEXT
    say $MSG
}

# Enter the matrix
alias matrix='COL=$(( $(tput cols) / 2 )); clear; tput setaf 2; while :; do tput cup $((RANDOM%COL)) $((RANDOM%COL)); printf "%$((RANDOM%COL))s" $((RANDOM%2)); done'

# Get colors in manual pages
man() {
 env \
 LESS_TERMCAP_mb=$(printf "\e[1;31m") \
 LESS_TERMCAP_md=$(printf "\e[1;31m") \
 LESS_TERMCAP_me=$(printf "\e[0m") \
 LESS_TERMCAP_se=$(printf "\e[0m") \
 LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
 LESS_TERMCAP_ue=$(printf "\e[0m") \
 LESS_TERMCAP_us=$(printf "\e[1;32m") \
 man "$@"
}

function ignore() {
    gibo dump Python R SublimeText Node macOS Go Julia VisualStudioCode Xcode >> .gitignore
    echo ".csv" >> .gitignore
    echo "tmp/*" >> .gitignore

    if [[ ! -f README.md ]] ; then
        echo -e "# $(basename $(pwd))\n" > README.md
    fi
    echo "created .gitignore"
    echo -e "created README.md\n"
}

alias welcome='say -v Maged "أهلن وسهلا"'

# helper func to log things with timestamps
TIMESTAMP_FORMAT='[%Y-%m-%d %H:%M:%S] >> '
function log_msg {
    if command -v ts > /dev/null; then
        echo "$@" | ts "$TIMESTAMP_FORMAT" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "$@" | ts "$TIMESTAMP_FORMAT"
        else
            echo "$@"
        fi
    else
        echo "$@"
    fi
}


